<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bioinformatics on Joe Miyamoto Philips&#39;s blog</title>
    <link>http://joemphilips.com/tags/bioinformatics/</link>
    <description>Recent content in Bioinformatics on Joe Miyamoto Philips&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 30 Dec 2015 15:45:36 +0900</lastBuildDate>
    <atom:link href="http://joemphilips.com/tags/bioinformatics/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>python_memo</title>
      <link>http://joemphilips.com/post/python_memo/</link>
      <pubDate>Wed, 30 Dec 2015 15:45:36 +0900</pubDate>
      
      <guid>http://joemphilips.com/post/python_memo/</guid>
      <description>&lt;p&gt;#Pythonメモ&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;##基本事項&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;print(&#39;hello,world!&#39;)&lt;/code&gt; ()でくくらないとpython3ではエラーになる。&lt;/p&gt;

&lt;p&gt;###組み込み型
####dictionary
perlで言うハッシュ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = {&#39;a&#39; : &#39;apple&#39;, &#39;b&#39; : banana, &#39;c&#39; : orrange}

#keyの値を取得
for k in d:
	print k
#keyとvalueの両方を取得
for k, v in d.items():
	print k, &#39;--&amp;gt;&#39;, v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;keyとvalueの候補が既にjリストで存在する場合は以下のように&lt;code&gt;izip&lt;/code&gt;で簡単に結合できる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
fruits = [&#39;apple&#39;, &#39;banana&#39;, &#39;orrange&#39;]
d = dict(izip(names, colors))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####list
perlでいう配列、&lt;code&gt;[]&lt;/code&gt;内に複数の要素を書くことで作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist = [&#39;A&#39;, &#39;B&#39;]
mylist.append(&#39;C&#39;)	#Cを追加
mylist.extend([&#39;D&#39;, &#39;E&#39;])	#別のリストと結合
mylist = mylist + [&#39;D&#39;, &#39;E&#39;]	#同上
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;append&lt;/code&gt;で複数項目のリストを追加すると、リストの中身ではなくlistオブジェクトそのものが追加される&lt;/p&gt;

&lt;p&gt;###繰り返し
for文は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in [1,2,3,4]
     print i**2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リストの部分は&lt;code&gt;range(4)&lt;/code&gt;で書く場合が多い、音が多いがiの値が大きいとメモリを食うので
&lt;code&gt;xrange(4)&lt;/code&gt;
がベター、&lt;code&gt;python3&lt;/code&gt;では&lt;code&gt;range&lt;/code&gt;が&lt;code&gt;xrange&lt;/code&gt;と同じ働きをする。&lt;/p&gt;

&lt;p&gt;逆順にループするときは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;colors = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;yellow&#39;]
for c in reversed(colors):
	print c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要素番号も取得したいときは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i, color in enumurate(colors):
	print i, &#39;--&amp;gt;&#39;, color

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###条件分岐
基本的には&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if 10 &amp;lt; x :
	print(&#39;10より大きい数字&#39;)
elif 10 == x :
	print(&#39;10です&#39;)
else:
	print(&#39;10より小さい数字です&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;論理演算子にはand、or、notがある。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if 10 &amp;lt; x and x% 2 == 0 :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たまにモジュールのソースコードに以下のような一文が書かれている場合がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ == &#39;__main__&#39;:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt;はそれが存在するモジュールの中の名前になる。&lt;code&gt;__main__&lt;/code&gt;というのは対話環境(Rで言う.Globalenv?)で呼ばれたときの値。
上のように書いておくことにより、そのモジュールがメインモジュール(最初に呼ばれたモジュール)である時にのみ実行する内容にできる。詳しくは&lt;a href=&#34;http://jutememo.blogspot.jp/2008/08/python-if-name.html&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###文字列操作
文字列型への返還は
&lt;code&gt;str()&lt;/code&gt;か&lt;code&gt;repr()&lt;/code&gt;を使用する。前者は人にやさしい表現に直し、後者は内部実装に近い見た目を返す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str(0.1)	# =&amp;gt; &#39;0.1&#39;
repr(0.1)	# =&amp;gt; &#39;0.10000000000000001&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pythonには&lt;code&gt;printf&lt;/code&gt;がない。書式を指定する場合は以下のようにする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;%d %o %x&#39; % (100, 100, 100)	# =&amp;gt; &#39;100 144 64&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt;10進数で表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%o&lt;/code&gt;8進数で表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%x&lt;/code&gt;16進数で表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt;str()と同じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%r&lt;/code&gt;repr()と同じ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;printと組み合わせると&amp;rdquo;&amp;ldquo;内でのオブジェクトの展開ができる。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot;arguments were: %s %s&amp;quot; % (args1, args2 )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下の二つは等価である&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Executing on %s as %s&amp;quot; % (env.host, env.user))

print(&amp;quot;Executing on %(host)s as %(user)s&amp;quot; % env)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####文字列型組み込み関数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;src = &#39;I like orange.&#39;
src.replace(&#39;orange&#39;, &#39;apple&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####正規表現&lt;/p&gt;

&lt;p&gt;&lt;code&gt;re&lt;/code&gt;を使用する
コンパイルして、patternオブジェクトを作ってから、match,search,findall,finditer,の4種類を使う。
- &lt;code&gt;match&lt;/code&gt; &amp;hellip; パターンが先頭にある場合にマッチする
- &lt;code&gt;search&lt;/code&gt; &amp;hellip; 全部探す。複数マッチの場合でも、最初の1つしか返してくれない
- &lt;code&gt;findall&lt;/code&gt; &amp;hellip; マッチした部分をすべて配列で返す
- &lt;code&gt;finditer&lt;/code&gt; &amp;hellip; マッチした部分をイテレータで返す。&lt;/p&gt;

&lt;p&gt;マッチした結果を適当な変数に入れたら、&lt;code&gt;group()&lt;/code&gt;,&lt;code&gt;start()&lt;/code&gt;,&lt;code&gt;end()&lt;/code&gt;, &lt;code&gt;span()&lt;/code&gt;で処理できる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;group&lt;/code&gt; &amp;hellip; マッチした文字列を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; &amp;hellip; マッチの開始位置を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt; &amp;hellip; 終了位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;span&lt;/code&gt; &amp;hellip; 開始位置と終了位置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re
pattern = re.compile(r&#39;3.*?7&#39;)
pattern.match(text)
if matchObj.group():
    print(matchObj.group())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;group&lt;/code&gt;
で後方参照を行うこともできる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pattern = re.compile(&amp;quot;GCC(.+)TATTT(.+)TTTC&amp;quot;)
m = pattern.search(&amp;lt;対象となるDNA文字列オブジェクト&amp;gt;)
if m:
    print(m.group(0))
    print(m.group(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正規表現による置換はre.subを用いる。Rのgsubとほぼ同じ。後方参照による置換の例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pattern = re.compile(&amp;quot;X(.)X&amp;quot;)
dna_mod = pattern.sub(r&amp;quot;C¥1C&amp;quot;, &amp;lt;DNA文字列オブジェクト&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列にrawを使用しているのがポイント&lt;/p&gt;

&lt;p&gt;###入出力
####ファイル操作
ファイルを開くときはwith構文を使用する。書き込みの例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;filename&amp;quot;, &amp;quot;w&amp;quot;) as file:
	file.write(&amp;quot;some string&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with構文を使用すると、クラス内で&lt;code&gt;__enter__&lt;/code&gt;および&lt;code&gt;__exit__&lt;/code&gt;を使用したクラスの場合,メソッド呼び出し前と呼び出し後にそれぞれを実行してくれるようになる
例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
with open(&amp;quot;mydata.txt&amp;quot;) as m:
    with open(&amp;quot;outputfile.txt&amp;quot;, &#39;w&#39;) as outfh:
        for line in m:
            itemList = line[:-1].split(&amp;quot;\t&amp;quot;)
            if itemList[0] == &#39;hoge&#39;:
                print(itemList[1], file = outfh)


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;line.strip()&lt;/code&gt;でも改行は削除されるが、空のタブも削除されるため、tsvファイルを扱うには適していない。&lt;/p&gt;

&lt;p&gt;一行ずつではなくまるごと読み込みたいときは
&lt;code&gt;allLines = open(&#39;foo.html&#39;).read()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;####標準入力からの取得&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
    for line in sys.stdin
    print line,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;,をつけることで改行をしなくなる。python3の場合は
&lt;code&gt;print(line, end = &amp;quot;&amp;quot;)&lt;/code&gt;とする。また、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&#39;foo.txt&#39;, &#39;w&#39;)
print(&#39;hello world&#39;, file=hoge.txt)  #ファイルに出力
print(&amp;quot;hello world&amp;quot;, file=sys.stdout)    #標準出力に出す
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####コマンドライン引数の取得&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
argvs = sys.argv	#argvsにはコマンドライン引数のリストが入る
argc = len(argvs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####ディレクトリ操作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os.path

myfile = &#39;Users/user/Document/test.txt&#39;
os.path.dirname(myfile)   #Users/user/Dockument
os.path.basename(myfile)    #&#39;test.txt&#39;
os.path.abspath(&#39;test.txt&#39;) #絶対パスを返す
os.path.exists(myfile)  #True
os.path.isdir(myfile)   #True

###スクリプト名を取得
import sys
print(__file__)  #実行時カレントディレクトリからの相対パスを取得
print os.path.abspath(os.path.dirname(__file__))  #スクリプトのあるディレクトリへの絶対パス
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;import os&lt;/code&gt;や&lt;code&gt;import shutil&lt;/code&gt;すると
OSにかかわらずディレクトリの削除やコピーなどができるみたい&lt;/p&gt;

&lt;p&gt;###正規表現でファイルを探す
import glob
glob.glob(&amp;rsquo;*.txt&amp;rsquo;)  #[&amp;lsquo;hoge.txt&amp;rsquo;, &amp;lsquo;huga.txt&amp;rsquo;]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
##関数定義

---
引数に*を付けると任意の数の引数をリストで受け取ることができる。
```python
def one(*args)
	print args
one()	# =&amp;gt; one(1,2,3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アスタリスクを2個にするとリストではなく辞書で受け取る。&lt;/p&gt;

&lt;p&gt;アスタリスクが1つの場合も2つの場合も関数に引数を渡すときにすべて一気に渡すための構文が用意されている。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; def foo(a, b, c):
        print a, b, c

&amp;gt;&amp;gt;&amp;gt; foo(*list1)
1 2 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;辞書の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dic1 = {&#39;a&#39;: 10, &#39;b&#39;: 20, &#39;c&#39;: 30}
&amp;gt;&amp;gt;&amp;gt; def foo(a = 1, b = 2, c = 3):
        print a, b, c

&amp;gt;&amp;gt;&amp;gt; foo(**dic1)
10 20 30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本的なことだが、関数に()を付けるか付けないかでは
共同が異なる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = myfunc()	#myfunc()の実行結果がはいる
myfunc2 = myfunc	#myfuncが複製される。(リファレンスではないので、myfuncを削除してもmyfunc2は残る。)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###lambda式
&lt;code&gt;lambda x: x + n for n in range(5)&lt;/code&gt;
とすると、ｎのスコープが関数内に限定されず、以下のように変なことになるので、
&lt;code&gt;lambda x n=n: x + n for n in range(5)&lt;/code&gt;
とする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
funcs = [lambda x: x+n for n in range(5)]
for f in funcs:
... print(f(0))
...
4
4
4
4
4

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##OOP、スコープ&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;__init__&lt;/code&gt;がコンストラクタ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Coordinate(object):
...     def __init__(self, x, y):
...         self.x = x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;locals()&lt;/code&gt;で名前空間内(多くの場合は関数内)のすべての値を辞書形式で返す。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def foo(arg):
	x = 10
	print locals()

foo(20)	# =&amp;gt; {&#39;x&#39; : 10, &#39;arg&#39; : 20}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;グローバルな名前空間については&lt;code&gt;globals()&lt;/code&gt;で確認ができる。&lt;/p&gt;

&lt;p&gt;###クロージャ
関数内関数は呼び出し時のlocalスコープの情報を記憶している。つまり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def outer(x):
...     def inner():
...         print x
...     return inner
&amp;gt;&amp;gt;&amp;gt; print1 = outer(1)
&amp;gt;&amp;gt;&amp;gt; print2 = outer(2)
&amp;gt;&amp;gt;&amp;gt; print1()
1
&amp;gt;&amp;gt;&amp;gt; print2()
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようになる。&lt;/p&gt;

&lt;p&gt;###デコレータ
クロージャの一種で関数を受け取って別の関数を返す関数。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def outer(some_func):
...     def inner():
...         print &amp;quot;before some_func&amp;quot;
...         ret = some_func() #1
...         return ret + 1
...     return inner
&amp;gt;&amp;gt;&amp;gt; def foo():
...     return 1
&amp;gt;&amp;gt;&amp;gt; decorated = outer(foo) #2
&amp;gt;&amp;gt;&amp;gt; decorated()
before some_func
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には関数の返す値の範囲を制限したりするために使うことが多い。
シンタックスシュガーとして@シンボルが用意されている詳しくは&lt;a href=&#34;http://qiita.com/_rdtr/items/d3bc1a8d4b7eb375c368&#34;&gt;こちら&lt;/a&gt;
最近は&lt;code&gt;@functools.wraps&lt;/code&gt;をデコレータ内で使用する感じにした方が良いかも&lt;/p&gt;

&lt;p&gt;##テスト
&lt;code&gt;unittest&lt;/code&gt;を用いる。
例えばroman1のto_roman()をテストしたい場合は
&lt;code&gt;/test/test_roman.py&lt;/code&gt;　のようなファイルを作り以下のように書く&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import roman1
import unitteset

class KnownValues(unittest.TestCase)
	values = ((1, &#39;I&#39;),
			  (2, &#39;II&#39;),
			  )
	def test_to_values(self):	#メソッド名はtestから始まっていなくてはならない
		for integer, numerical in self.values:
		result = roman1.to_roman(integer)
		self.assertEqual(numerical, result)	#TestCaseクラスのメソッド

if __name__ == &#39;__main__&#39;:
	unittest.main()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストを実行する際は -v オプションを付ける。
assert*メソッドにはいろいろある。&lt;a href=&#34;http://surgo.jp/2011/12/python-or-unittest2.html&#34;&gt;こちら&lt;/a&gt;を参照&lt;/p&gt;

&lt;p&gt;このケースだと、例外処理が不十分である。つまり、以上に大きい値がto_romanに与えられると、&lt;code&gt;&amp;quot;MMMMMM&amp;quot;&lt;/code&gt;のような値が返される可能性があり、これは喜ばしくない。to_romanは3999以上の値はエラーを吐くようにしたい。こういった場合は&lt;code&gt;assertRaises&lt;/code&gt;メソッドを使用する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ToRomanBadInput(unittest.TestCase):
	def test_too_large(self):

		self.assertRaises(roman1.OutOfRangeError, roman1.to_roman, 4000)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなテストを書いたら、roman1.pyにOutOfRangeErrorを追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class OutOfRangeError(ValueError):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;unittestのメソッドには3つの返り値がある&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass &amp;hellip; テストに成功した&lt;/li&gt;
&lt;li&gt;Fail &amp;hellip; テストに失敗した&lt;/li&gt;
&lt;li&gt;Error &amp;hellip; コードを実行できなかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##例外処理
例外を補足するには&lt;code&gt;try: except:&lt;/code&gt;節を利用する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while True:
	try:
		n = int(raw_input(&amp;quot;数字を入力してください&amp;quot;))
		print n
		break
	except (ValueError, IndexError):
		print &amp;quot;例外が発生しました&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように書くと、まずtry:の中を実行し、errorがなければ節を抜ける。errorがあればexcept文の中を実行する。except文に対応するErrorのクラス(この場合はValueError、IndexError)がなければ節から抜ける。
どのErrorクラスかよくわからない時は、とりあえず、Exceptionクラスを指定しておけばよい？例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
	a = int(&#39;string&#39;)
except Exception as e:
	print e.message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でもほんとは適切なエラークラスを指定すべき&lt;/p&gt;

&lt;p&gt;以下にエラークラスの種類を示す&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BaseException &amp;hellip; 全ての例外のベースクラス

&lt;ul&gt;
&lt;li&gt;Exceprion &amp;hellip; 実行中のアプリケーションを終了させない例外のベースクラス。ユーザー定義の例外はこれをベースをすべき&lt;/li&gt;
&lt;li&gt;StandardError &amp;hellip; よくわからん&lt;/li&gt;
&lt;li&gt;ArithmeticError &amp;hellip; 数値関連のエラー&lt;/li&gt;
&lt;li&gt;LookupError &amp;hellip; 何かを発見した時に発生させるエラー&lt;/li&gt;
&lt;li&gt;EnvironmentError &amp;hellip; pythonの外部から発生するエラーのためのベースクラス&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;より細かい区分は&lt;a href=&#34;http://ja.pymotw.com/2/exceptions/&#34;&gt;ここ&lt;/a&gt;を参照&lt;/p&gt;

&lt;p&gt;###型のチェック
&lt;code&gt;isinstance(n, int)&lt;/code&gt;のようにして行う。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if not isinstance(n, int):
	raise NotIntegerError(&amp;quot;Please give me Integer value!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;matplotlib&lt;/p&gt;

&lt;p&gt;##logging
&lt;code&gt;print()&lt;/code&gt;に似た情報を出力できる。違いは、情報に重要度の違いを持たせられること。デバッグの時にのみ、出力することができたりする
&lt;a href=&#34;http://docs.python.jp/2/howto/logging.html#logging-basic-tutorial&#34;&gt;ここ&lt;/a&gt;の&amp;rdquo;基本ロギングチュートリアル&amp;rdquo;を見よ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ == &#39;__main__&#39;
	logging.basicConfig(level=logging.DEBUG,
						format=&#39;%(asctime)s- %(name)s - %(levelname)s - %(message)s&#39;)
	logging.debug(&#39;this is debug message&#39;)
    logging.info(&#39;this is info message&#39;)
    logging.warning(&#39;this is warning message&#39;)
    logging.error(&#39;this is error message&#39;)
    logging.critical(&#39;this is critical message&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##バージョンの違い、処理系&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;from__futute__import division&lt;/code&gt;
とすることで、python3の整数除算の挙動をpython2に取り入れることができる。
pypy…pythonインタプリタだがそれ自体pythonで記述されている。RPythonで書かれている。
###python自体のバージョン管理
python2,3を共存させたいような場合は&lt;code&gt;pyenv&lt;/code&gt;が便利
&lt;code&gt;~/.pyenv&lt;/code&gt; に&lt;code&gt;git clone http:\\github.com/yyuu/pyenv.git&lt;/code&gt;したものを入れる。
&lt;code&gt;git clone https://github.com/yyuu/pyenv.git ~/.pyenv&lt;/code&gt;
&lt;code&gt;git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.zshrc&lt;/code&gt;に以下のように書いておくとよい&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# pyenv
export PYENV_ROOT=&amp;quot;${HOME}/.pyenv&amp;quot;
if [ -d &amp;quot;${PYENV_ROOT}&amp;quot; ]; then
export PATH=${PYENV_ROOT}/bin:$PATH
    eval &amp;quot;$(pyenv init -)&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pyenv install anaconda-2.0.1
pyenv insatll anaconda3-2.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような使い方ができる。以下にコマンド&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pyenv versions&lt;/code&gt; &amp;hellip; 現在のpythonのバージョンを見る。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv versions&lt;/code&gt; &amp;hellip; 使用可能なvirtualenvの一覧を見る。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv install -l&lt;/code&gt; &amp;hellip; installできるものの一覧&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv exec pip install --upgrade pip&lt;/code&gt; &amp;hellip; pipを最新にする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv virtualenv 2.7.10 my-virtualenv-2.7.10&lt;/code&gt; &amp;hellip; 新しいvirtualenvの作成。
作成したvirtualenvは$PYENV_ROOT/versions/ に入る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv uninstall my-virtualenv-2.7.10&lt;/code&gt; &amp;hellip; 削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv global my-virtualenv-2.7.10&lt;/code&gt; &amp;hellip; システム全体で切り替え。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv local my-virtualenv-2.7.10&lt;/code&gt; &amp;hellip; カレントディレクトリのみ切り替え&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###anaconda
数値計算用のパッケージなどがセットになったpythonのディストリビューション&lt;/p&gt;

&lt;p&gt;###Rpython
Rpython…pythonにいくつかの制限を加える代わりに高速化したもの&lt;/p&gt;

&lt;p&gt;##他言語との連携
###R
昔はRPy2が使用されていたがいまではPypeRが主流&lt;/p&gt;

&lt;p&gt;##パッケージ管理
pyenvが便利？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;pipのインストールは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install python-pip pythondev build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で行う。
&lt;code&gt;pip -U install fabric&lt;/code&gt;Fabricのインストール
-Uオプションはすでにインストールされている場合アップグレードしてくれる&lt;/p&gt;

&lt;p&gt;###packageの中身
httplib2というパッケージの場合、以下のようなディレクトリ構成になる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;httplib2/
|
+--README.txt
|
+--setup.py
|
+--docs/
|
+-httplib2/
	|
	+--__init__.py
	|
	+--hoge.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このうち/docsだけは必須ではなく、&lt;code&gt;MANIFEST.in&lt;/code&gt;で明示しなければ配布パッケージには含まれない。&lt;/p&gt;

&lt;p&gt;###自分でパッケージを書く場合
setuptoolsを使う。
パッケージのrootディレクトリに、&lt;code&gt;setup.py&lt;/code&gt;を置き、以下のような感じでメタデータを書く&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

from distutils.core import setup

setup(name=&#39;Distutils&#39;,
      version=&#39;1.0&#39;,
      description=&#39;Python Distribution Utilities&#39;,
      author=&#39;Greg Ward&#39;,
      author_email=&#39;gward@python.net&#39;,
      url=&#39;http://www.python.org/sigs/distutils-sig/&#39;,
      packages=[&#39;distutils&#39;, &#39;distutils.command&#39;],
     )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####Manifest.inについて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;include hoge	#rootディレクトリのhogeという名前のファイルを配布物に含める
recursive-include huga *.html *.css	#rootディレクトリ以外でも、その名前のファイルがあれば含める。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##構成管理&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;facric -&amp;gt; ansibleへと移るのが吉
###fabric
基本は以下のように書く&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import run

def show_uname():
	run(&#39;uname -s&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####fabric.api
基本コマンドのクラス、よく使われるのは
&lt;code&gt;run,sudo,local,put&lt;/code&gt;の４つ、
- &lt;code&gt;local&lt;/code&gt; &amp;hellip; 手元のサーバでそのスクリプトを実行する
- &lt;code&gt;put&lt;/code&gt; &amp;hellip; sftpでファイルを転送する。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import put
def scp():
	put(&#39;local path&#39;, &#39;remote path&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get(remote_path, local_path = &amp;lt;current_dir&amp;gt;)&lt;/code&gt; &amp;hellip; リモートからファイルをゲット。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open_shell&lt;/code&gt; &amp;hellip; デバッグ用。タスクの実行を一時停止し、リモートのシェルを開く。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prompt()&lt;/code&gt;    &amp;hellip; ユーザーからの入力を受け付ける&lt;/li&gt;
&lt;li&gt;reboot()  &amp;hellip; 言わずもがな&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####fabric.contrib&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.confirm(&amp;quot;Message&amp;quot;, default = False)&lt;/code&gt;　 &amp;hellip; ユーザに[y/N]での確認を促す。promptの制限版&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fabfile.pyという名前で保存し、&lt;code&gt;fab&lt;/code&gt;コマンドで実行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fab -H &amp;lt;server_address&amp;gt; show_uname
#or
fab -u &amp;lt;user_name&amp;gt; -i &amp;lt;path_to_secret_key&amp;gt; -H &amp;lt;server_address&amp;gt; show_uname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-Hで指定する先に&lt;code&gt;localhost&lt;/code&gt;を指定することもできる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fab&lt;/code&gt;コマンドには引数を与えることもできる(タスク引数)例えばfabfile.py内に以下のように記述し&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello(name=&amp;quot;world&amp;quot;)
	print(&amp;quot;Hello %s!&amp;quot; % name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シェルで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fab hello:name=jeff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fabfile/&lt;/code&gt;ディレクトリを作ってやり、その中に任意の.pyファイルを入れてやれば、それを実行できる
taskで分割するときは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import task

@task
def restart():
	pass
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;~/.fabricrc&lt;/code&gt;に&lt;code&gt;fabfile = hoge.py&lt;/code&gt;
と書いてやると任意の名前のファイルをfabfileとして扱える&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;環境変数やカレントディレクトリを指定したうえで、特定の動作を送ってほしい場合は&lt;code&gt;shell_env,cd,lcd&lt;/code&gt;を使用する&lt;/p&gt;

&lt;p&gt;環境変数HOGEをlocal、remoteともにfugaで固定する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import local, shell_env, run

def envtest():
	with shell_env(HOGE=&#39;fuga&#39;):
		local(&#39;env&#39;)
		run(&#39;env&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with構文を抜けるとshell_envの効果はなくなる。&lt;code&gt;cd,lcd&lt;/code&gt;も同様&lt;/p&gt;

&lt;p&gt;&lt;em&gt;デフォルトだと&lt;code&gt;~/.ssh/config&lt;/code&gt;は利用してくれないのでスクリプト内に以下のように書いておく必要がある&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;env.use_ssh_config = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####fabricrc
bashrcのようなもの、デフォルトだと&lt;code&gt;~/fabricrc&lt;/code&gt;を探すが
&lt;code&gt;-c&lt;/code&gt;で指定してやると好きなものを使える&lt;/p&gt;

&lt;p&gt;####失敗への対処
fabricはそれぞれのシェルスクリプトの返り値をチェックして、失敗の場合はそこで停止する。それを変更したい場合は各種モジュールを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import with_statement
from fabric.api import local, settings, abort
from fabric.contrib.console import confirm

def test():
    with settings(warn_only=True):
        result = local(&#39;./manage.py test my_app&#39;, capture=True)
    if result.failed and not confirm(&amp;quot;Tests failed. Continue anyway?&amp;quot;):
        abort(&amp;quot;Aborting at user request.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####if文
ファイルの存在などをシェルスクリプトのif文でチェックして実行したい場合は少し特殊で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;code_dir = &#39;srv/django/myproject&#39;
with settings(warn_only=True):
	if run(&amp;quot;test -d %s&amp;quot; % code_dir).failed:
		run(&amp;quot;git clone user@vchost:path/to/repo/.git %s&amp;quot; % code_dir)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####env
グローバルなシングルトンで、タスク間で共有される設定を入れる。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import env
env.hosts =[&#39;my_server&#39;]	#デプロイ先のアドレスを指定。(リストなのでいくつでもよい)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よく使われるものには以下がある
- &lt;code&gt;env.user&lt;/code&gt; SSH接続するときのデフォルトユーザ名は自分のローカル名だが、これを設定すると上書きできる
- &lt;code&gt;password&lt;/code&gt;sudoや接続のパスワードを設定する。特に指定しなければ必要になったタイミングで聞いてくるらしい
- &lt;code&gt;warn_only&lt;/code&gt;エラーを検知した時に実行を停止しないか否か。デフォルトはfalse。たいていの場合はenvでグローバルに設定せず,&lt;code&gt;with settings(warn_only = True)&lt;/code&gt;の形で指定する。あるいはデコレータ(後述)で指定してもOK
- &lt;code&gt;env.roledefs&lt;/code&gt;複数のホストを役割ごとにまとめるために使用する。例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;env.roledefs = {
	&#39;web&#39; : [&#39;www1&#39;, &#39;www2&#39;, &#39;www3&#39;]
	&#39;dns&#39; : [&#39;ns1&#39;, &#39;ns2&#39;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env.config_file&lt;/code&gt;設定を書いたyamlのパスを指定する。fabfile内に&lt;code&gt;env.config_file = &#39;deploy.yaml&#39;&lt;/code&gt;と書いておくと、&lt;code&gt;env.config.&amp;lt;yamlの要素名&amp;gt;&lt;/code&gt;の形で参照できるようになる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;envは実際にはdictのサブクラスである。
ほとんどのenvはデコレータで代用できそうな気もする
envで指定できる要素の一覧は&lt;a href=&#34;http://fabric-ja.readthedocs.org/ja/latest/usage/env.html&#34;&gt;こちら&lt;/a&gt;を参照&lt;/p&gt;

&lt;p&gt;####冪等制の保証
一応スクリプトだけでもできる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def setup_package(package = &amp;quot;apache2&amp;quot;):
	if run(&amp;quot;dpkg -s %s | grep &#39;Status:&#39; ; true&amp;quot; %\
	(package)).find(&amp;quot;installed&amp;quot;) == -1:
	sudo(&amp;quot;aptitude install &#39;%s&#39;&amp;quot; % (package))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…が、この方法はやめた方が良い。Cuisineを使用するのが吉&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def setup_package(package = &amp;quot;apache2&amp;quot;):
	package_ensure(&amp;quot;%s&amp;quot; % (package))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####デコレータ
特定のホストやroleのみに実行されるタスクの場合はデコレータを使用すると便利&lt;/p&gt;

&lt;p&gt;#####@hosts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import hosts, run
@hosts(&#39;host1&#39;, &#39;host2&#39;)
def mytask():
	run(&#39;ls /var/www&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうするとenv.hostsを一時的に無視するようになる。&lt;/p&gt;

&lt;p&gt;#####@prallel
複数のサーバに対してタスクを並列に実行する際に使用する。&lt;/p&gt;

&lt;p&gt;#####@with_settings
例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@with_settings(warn_only=True)
def foo():
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#####@task
タスクは&lt;code&gt;@task&lt;/code&gt;デコレータで囲ってしまうのがよいらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@task
def mytask()
	run(&amp;quot;uname -a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エイリアスの設定もできる。こうすることで、 &lt;code&gt;fab --list&lt;/code&gt;した時に現れるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@task(alias=&#39;dwm&#39;)
def deploy_with_migrations():
	hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;defalutを使用することで、上位のタスクをデフォルトの挙動として使用することができる。例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fabric.api import task

@task
def migrate():
    pass

@task
def push():
    pass

@task
def provision():
    pass

@task
def full_deploy():
    if not provisioned:
        provision()
    push()
    migrate()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というfabfile.pyがあった時に&lt;code&gt;full_deploy()&lt;/code&gt;の上の&lt;code&gt;@task&lt;/code&gt;を&lt;code&gt;@task(default=True)&lt;/code&gt;にすることで引数なしで&lt;code&gt;fab&lt;/code&gt;をするだけで&lt;code&gt;full_deploy&lt;/code&gt;を行ってくれる。&lt;/p&gt;

&lt;p&gt;####fabコマンド
&lt;code&gt;fab --list&lt;/code&gt;タスクの一覧を表示&lt;/p&gt;

&lt;p&gt;基本的には
&lt;code&gt;fab task1 task2&lt;/code&gt;
のかたちで使用する。
内部でoptparseライブラリを使用しており、オプションと引数の順番は自由に入れ替えることができる。
fabfile.pyないしはfabfile/の探索メカニズムはvagrantと同様、カレントディレクトリから登っていく形で探す。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--&lt;/code&gt;を使用するとワンライナーで任意のリモートシェルコマンドを叩くことができる。例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fab -H system1,system2,system3 -- uname -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###ansible
&lt;a href=&#34;http://qiita.com/rasenn/items/d42ed07368ae90605c29&#34;&gt;ここを参照&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;####インストール
RHELの場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rpm -ivh http://ftp.riken.jp/Linux/fedora/epel/7/x86_64/e/epel-release-7-5.noarch.rpm	#epelのリポジトリが使用可能になる

yum install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debianの場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;deb http://ftp.jp.debian.org/debian wheezy-backports main contrib non-free
apt-get install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##各種パッケージ&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;###PyYaml
&lt;code&gt;pip install pyyaml&lt;/code&gt;でインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で使用する。読み込みと書き込みを行える。
####読み込み&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pprint
f = open(&#39;hoge.yaml&#39;, &#39;r&#39;)
data = yaml.load(f)
pprint.pprint(data)	#いい感じに整形して出力してくれる
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には&lt;code&gt;&#39;r&#39;&lt;/code&gt; ではなく&lt;code&gt;&#39;rU&#39;&lt;/code&gt;にした方が良い。こちらは改行コードがwindowsでもよしなに計らってくれる。&lt;/p&gt;

&lt;p&gt;####書き込み&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist = {&#39;dogs&#39;: [&#39;pochi&#39;, &#39;taro&#39;, &#39;kai&#39;],
          &#39;cats&#39;: [&#39;shimajiro&#39;, &#39;tyson&#39;]}

f = open(&#39;out.yaml&#39;, &#39;w&#39;)
f.write(yaml.dump(mylist))  # 書き込む
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##可視化&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;bokeh…可視化のライブラリ
seaborn。。。matplotlibに基づく可視化のライブラリ&lt;/p&gt;

&lt;p&gt;##numpy&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;高速な行列演算などをサポートした科学技術計算用のパッケージ
inport numpy as np     #npでinportするのが慣例
np.ndarray     #多次元配列を扱うためのクラス。
np.ndarray     #N次元配列を扱うための&lt;/p&gt;

&lt;p&gt;##作図&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Translate snakemake</title>
      <link>http://joemphilips.com/post/Translate-snakemake/</link>
      <pubDate>Sat, 21 Nov 2015 18:12:53 +0900</pubDate>
      
      <guid>http://joemphilips.com/post/Translate-snakemake/</guid>
      <description>&lt;p&gt;#チュートリアルを翻訳しました&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/johanneskoester/snakemake/wiki/Home&#34;&gt;Snakemake&lt;/a&gt;は主にバイオインフォマティクスに使われるパイプライン作成用ツールです。
翻訳をGithubに載せました。
&lt;a href=&#34;https://github.com/joemphilips/Translate_Snakemake_Tutorial&#34;&gt;こちらからどうぞ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>